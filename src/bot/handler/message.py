import asyncio
import json
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from io import BytesIO
from config import config
from zoneinfo import ZoneInfo
from log.log import setup_logger
from db.models.user import select_user_proof_data, status_basket_user_expectation

bot = Bot(
    config.BOT_TOKEN.get_secret_value(),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
MOSCOW_TZ = ZoneInfo("Europe/Moscow")
logger = setup_logger("Message")

async def message_group_proof(user_id: int, filename: str, content: bytes, date):
    GROUP_CHAT_ID = config.ADMIN_GROUP_ID.get_secret_value()
    await asyncio.sleep(3)

    user_data = await select_user_proof_data(user_id)
    if not user_data:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return

    user = user_data[0]
    
    try:
        products = json.loads(user["product_list"])
    except Exception as e:
        products = []
        print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ product_list:", e)

    product_lines = ""
    for idx, item in enumerate(products, 1):
        product_id, name, count = item
        product_lines += f"{idx}. <b>{name}</b> ‚Äî <code>{count} —à—Ç.</code>\n"

    caption = (
        f"<b>üßæ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={user_id}'>{user['name']}</a> ({user['tgname']})\n"
        f"<b>üõçÔ∏è –ü–æ–∫—É–ø–∫–∏:</b>\n{product_lines}\n"
        f"<b>üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {user['total_sum_rub']} ‚ÇΩ\n"
        f"<b>‚≠ê –ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥:</b> {user['total_sum_star']}‚≠ê\n"
        f"<b>üìÖ –î–∞—Ç–∞:</b> {date.strftime('%d.%m.%Y %H:%M')}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        ]
    ])

    input_file = BufferedInputFile(file=content, filename=filename)
    ext = filename.lower().split('.')[-1]

    if ext in ["jpg", "jpeg", "png", "gif"]:
        await bot.send_photo(chat_id=GROUP_CHAT_ID, photo=input_file, caption=caption, reply_markup=keyboard)
    elif ext == "pdf":
        await bot.send_document(chat_id=GROUP_CHAT_ID, document=input_file, caption=caption, reply_markup=keyboard)
    else:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –æ—Ç {user_id}: {filename}")
        
    await status_basket_user_expectation(user_id)